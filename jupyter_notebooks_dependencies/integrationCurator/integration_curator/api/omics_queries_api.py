# coding: utf-8

"""
    ODM Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: default-released
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from integration_curator.api_client import ApiClient


class OmicsQueriesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def search_expression(self, **kwargs):  # noqa: E501
        """Perform integration-aware query for expression objects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_expression(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str study_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                                 **Note**

                                     In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                                 **Examples**

                                     A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                                 **Literal values**

                                     **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                                 **Terms**

                                     A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                                 **Binary connectives**

                                     The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str study_query: Search for objects via a full-text query over all metadata.
        :param str sample_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                                  **Note**

                                      In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                                  **Examples**

                                      A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                                  **Literal values**

                                      **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                                  **Terms**

                                      A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                                  **Binary connectives**

                                      The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str sample_query: Search for objects via a full-text query over all metadata.
        :param bool search_specific_terms: Modifies the full-text query to search across more specific dictionary terms. For example, search query \"Body fluid\" will also search for files with term \"Blood\" in their metadata, given there exists a dictionary that describes such relation.
        :param str vx_query: Variant data query, of the form: VariationId=rs548419688,rs544419019 Intervals=12:23432-234324,30:234324-23432 Gene=ASPM,BRCA1 Reference=A|T Alteration=C|G Quality=[0.9:1.0) Type=SNP|MNP|INS|DEL|MIXED info_VT=DEL info_EUR_AF=(0.9:1.0) Start=12340 AlterationNumber=2
        :param str vx_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str ex_query: Expression data query, of the form: Gene=ENSG00000230368,ENSG00000188976,ENSG00000016602,ENSG00000162670 MinValue=1.50
        :param str ex_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str fx_query: Flow cytometry data query, of the form: ReadoutType=Median|Count CellPopulation=\"CD45+, live\" MinValue=3.5
        :param str fx_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param int page_offset: Offset into omics results
        :param int page_limit: How many results to retrieve in this page, instead of the default 2000
        :return: OmicsResponse. If the method is called asynchronously, returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_expression_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_expression_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_expression_with_http_info(self, **kwargs):  # noqa: E501
        """Perform integration-aware query for expression objects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_expression_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str study_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                                 **Note**

                                     In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                                 **Examples**

                                     A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                                 **Literal values**

                                     **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                                 **Terms**

                                     A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                                 **Binary connectives**

                                     The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str study_query: Search for objects via a full-text query over all metadata.
        :param str sample_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                                  **Note**

                                      In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                                  **Examples**

                                      A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                                  **Literal values**

                                      **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                                  **Terms**

                                      A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                                  **Binary connectives**

                                      The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str sample_query: Search for objects via a full-text query over all metadata.
        :param bool search_specific_terms: Modifies the full-text query to search across more specific dictionary terms. For example, search query \"Body fluid\" will also search for files with term \"Blood\" in their metadata, given there exists a dictionary that describes such relation.
        :param str vx_query: Variant data query, of the form: VariationId=rs548419688,rs544419019 Intervals=12:23432-234324,30:234324-23432 Gene=ASPM,BRCA1 Reference=A|T Alteration=C|G Quality=[0.9:1.0) Type=SNP|MNP|INS|DEL|MIXED info_VT=DEL info_EUR_AF=(0.9:1.0) Start=12340 AlterationNumber=2
        :param str vx_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str ex_query: Expression data query, of the form: Gene=ENSG00000230368,ENSG00000188976,ENSG00000016602,ENSG00000162670 MinValue=1.50
        :param str ex_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str fx_query: Flow cytometry data query, of the form: ReadoutType=Median|Count CellPopulation=\"CD45+, live\" MinValue=3.5
        :param str fx_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param int page_offset: Offset into omics results
        :param int page_limit: How many results to retrieve in this page, instead of the default 2000
        :return: OmicsResponse. If the method is called asynchronously, returns the request thread.
        """

        all_params = ['study_filter', 'study_query', 'sample_filter', 'sample_query', 'search_specific_terms', 'vx_query', 'vx_filter', 'ex_query', 'ex_filter', 'fx_query', 'fx_filter', 'page_offset', 'page_limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_expression" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'study_filter' in params:
            query_params.append(('studyFilter', params['study_filter']))  # noqa: E501
        if 'study_query' in params:
            query_params.append(('studyQuery', params['study_query']))  # noqa: E501
        if 'sample_filter' in params:
            query_params.append(('sampleFilter', params['sample_filter']))  # noqa: E501
        if 'sample_query' in params:
            query_params.append(('sampleQuery', params['sample_query']))  # noqa: E501
        if 'search_specific_terms' in params:
            query_params.append(('searchSpecificTerms', params['search_specific_terms']))  # noqa: E501
        if 'vx_query' in params:
            query_params.append(('vxQuery', params['vx_query']))  # noqa: E501
        if 'vx_filter' in params:
            query_params.append(('vxFilter', params['vx_filter']))  # noqa: E501
        if 'ex_query' in params:
            query_params.append(('exQuery', params['ex_query']))  # noqa: E501
        if 'ex_filter' in params:
            query_params.append(('exFilter', params['ex_filter']))  # noqa: E501
        if 'fx_query' in params:
            query_params.append(('fxQuery', params['fx_query']))  # noqa: E501
        if 'fx_filter' in params:
            query_params.append(('fxFilter', params['fx_filter']))  # noqa: E501
        if 'page_offset' in params:
            query_params.append(('pageOffset', params['page_offset']))  # noqa: E501
        if 'page_limit' in params:
            query_params.append(('pageLimit', params['page_limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Genestack-API-Token']  # noqa: E501

        return self.api_client.call_api(
            '/omics/expression', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OmicsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_expression_data(self, **kwargs):  # noqa: E501
        """Perform integration-aware query for expression data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_expression_data(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str study_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                                 **Note**

                                     In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                                 **Examples**

                                     A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                                 **Literal values**

                                     **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                                 **Terms**

                                     A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                                 **Binary connectives**

                                     The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str study_query: Search for objects via a full-text query over all metadata.
        :param str sample_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                                  **Note**

                                      In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                                  **Examples**

                                      A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                                  **Literal values**

                                      **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                                  **Terms**

                                      A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                                  **Binary connectives**

                                      The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str sample_query: Search for objects via a full-text query over all metadata.
        :param bool search_specific_terms: Modifies the full-text query to search across more specific dictionary terms. For example, search query \"Body fluid\" will also search for files with term \"Blood\" in their metadata, given there exists a dictionary that describes such relation.
        :param str vx_query: Variant data query, of the form: VariationId=rs548419688,rs544419019 Intervals=12:23432-234324,30:234324-23432 Gene=ASPM,BRCA1 Reference=A|T Alteration=C|G Quality=[0.9:1.0) Type=SNP|MNP|INS|DEL|MIXED info_VT=DEL info_EUR_AF=(0.9:1.0) Start=12340 AlterationNumber=2
        :param str vx_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str ex_query: Expression data query, of the form: Gene=ENSG00000230368,ENSG00000188976,ENSG00000016602,ENSG00000162670 MinValue=1.50
        :param str ex_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str fx_query: Flow cytometry data query, of the form: ReadoutType=Median|Count CellPopulation=\"CD45+, live\" MinValue=3.5
        :param str fx_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param int page_offset: Offset into omics results
        :param int page_limit: How many results to retrieve in this page, instead of the default 2000
        :return: OmicsResponse. If the method is called asynchronously, returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_expression_data_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_expression_data_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_expression_data_with_http_info(self, **kwargs):  # noqa: E501
        """Perform integration-aware query for expression data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_expression_data_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str study_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                                 **Note**

                                     In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                                 **Examples**

                                     A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                                 **Literal values**

                                     **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                                 **Terms**

                                     A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                                 **Binary connectives**

                                     The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str study_query: Search for objects via a full-text query over all metadata.
        :param str sample_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                                  **Note**

                                      In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                                  **Examples**

                                      A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                                  **Literal values**

                                      **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                                  **Terms**

                                      A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                                  **Binary connectives**

                                      The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str sample_query: Search for objects via a full-text query over all metadata.
        :param bool search_specific_terms: Modifies the full-text query to search across more specific dictionary terms. For example, search query \"Body fluid\" will also search for files with term \"Blood\" in their metadata, given there exists a dictionary that describes such relation.
        :param str vx_query: Variant data query, of the form: VariationId=rs548419688,rs544419019 Intervals=12:23432-234324,30:234324-23432 Gene=ASPM,BRCA1 Reference=A|T Alteration=C|G Quality=[0.9:1.0) Type=SNP|MNP|INS|DEL|MIXED info_VT=DEL info_EUR_AF=(0.9:1.0) Start=12340 AlterationNumber=2
        :param str vx_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str ex_query: Expression data query, of the form: Gene=ENSG00000230368,ENSG00000188976,ENSG00000016602,ENSG00000162670 MinValue=1.50
        :param str ex_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str fx_query: Flow cytometry data query, of the form: ReadoutType=Median|Count CellPopulation=\"CD45+, live\" MinValue=3.5
        :param str fx_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param int page_offset: Offset into omics results
        :param int page_limit: How many results to retrieve in this page, instead of the default 2000
        :return: OmicsResponse. If the method is called asynchronously, returns the request thread.
        """

        all_params = ['study_filter', 'study_query', 'sample_filter', 'sample_query', 'search_specific_terms', 'vx_query', 'vx_filter', 'ex_query', 'ex_filter', 'fx_query', 'fx_filter', 'page_offset', 'page_limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_expression_data" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'study_filter' in params:
            query_params.append(('studyFilter', params['study_filter']))  # noqa: E501
        if 'study_query' in params:
            query_params.append(('studyQuery', params['study_query']))  # noqa: E501
        if 'sample_filter' in params:
            query_params.append(('sampleFilter', params['sample_filter']))  # noqa: E501
        if 'sample_query' in params:
            query_params.append(('sampleQuery', params['sample_query']))  # noqa: E501
        if 'search_specific_terms' in params:
            query_params.append(('searchSpecificTerms', params['search_specific_terms']))  # noqa: E501
        if 'vx_query' in params:
            query_params.append(('vxQuery', params['vx_query']))  # noqa: E501
        if 'vx_filter' in params:
            query_params.append(('vxFilter', params['vx_filter']))  # noqa: E501
        if 'ex_query' in params:
            query_params.append(('exQuery', params['ex_query']))  # noqa: E501
        if 'ex_filter' in params:
            query_params.append(('exFilter', params['ex_filter']))  # noqa: E501
        if 'fx_query' in params:
            query_params.append(('fxQuery', params['fx_query']))  # noqa: E501
        if 'fx_filter' in params:
            query_params.append(('fxFilter', params['fx_filter']))  # noqa: E501
        if 'page_offset' in params:
            query_params.append(('pageOffset', params['page_offset']))  # noqa: E501
        if 'page_limit' in params:
            query_params.append(('pageLimit', params['page_limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Genestack-API-Token']  # noqa: E501

        return self.api_client.call_api(
            '/omics/expression/data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OmicsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_flow_cytometry(self, **kwargs):  # noqa: E501
        """Perform integration-aware query for Flow Cytometry objects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_flow_cytometry(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str study_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                                 **Note**

                                     In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                                 **Examples**

                                     A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                                 **Literal values**

                                     **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                                 **Terms**

                                     A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                                 **Binary connectives**

                                     The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str study_query: Search for objects via a full-text query over all metadata.
        :param str sample_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                                  **Note**

                                      In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                                  **Examples**

                                      A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                                  **Literal values**

                                      **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                                  **Terms**

                                      A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                                  **Binary connectives**

                                      The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str sample_query: Search for objects via a full-text query over all metadata.
        :param bool search_specific_terms: Modifies the full-text query to search across more specific dictionary terms. For example, search query \"Body fluid\" will also search for files with term \"Blood\" in their metadata, given there exists a dictionary that describes such relation.
        :param str vx_query: Variant data query, of the form: VariationId=rs548419688,rs544419019 Intervals=12:23432-234324,30:234324-23432 Gene=ASPM,BRCA1 Reference=A|T Alteration=C|G Quality=[0.9:1.0) Type=SNP|MNP|INS|DEL|MIXED info_VT=DEL info_EUR_AF=(0.9:1.0) Start=12340 AlterationNumber=2
        :param str vx_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str ex_query: Expression data query, of the form: Gene=ENSG00000230368,ENSG00000188976,ENSG00000016602,ENSG00000162670 MinValue=1.50
        :param str ex_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str fx_query: Flow cytometry data query, of the form: ReadoutType=Median|Count CellPopulation=\"CD45+, live\" MinValue=3.5
        :param str fx_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param int page_offset: Offset into omics results
        :param int page_limit: How many results to retrieve in this page, instead of the default 2000
        :return: OmicsResponse. If the method is called asynchronously, returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_flow_cytometry_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_flow_cytometry_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_flow_cytometry_with_http_info(self, **kwargs):  # noqa: E501
        """Perform integration-aware query for Flow Cytometry objects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_flow_cytometry_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str study_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                                 **Note**

                                     In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                                 **Examples**

                                     A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                                 **Literal values**

                                     **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                                 **Terms**

                                     A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                                 **Binary connectives**

                                     The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str study_query: Search for objects via a full-text query over all metadata.
        :param str sample_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                                  **Note**

                                      In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                                  **Examples**

                                      A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                                  **Literal values**

                                      **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                                  **Terms**

                                      A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                                  **Binary connectives**

                                      The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str sample_query: Search for objects via a full-text query over all metadata.
        :param bool search_specific_terms: Modifies the full-text query to search across more specific dictionary terms. For example, search query \"Body fluid\" will also search for files with term \"Blood\" in their metadata, given there exists a dictionary that describes such relation.
        :param str vx_query: Variant data query, of the form: VariationId=rs548419688,rs544419019 Intervals=12:23432-234324,30:234324-23432 Gene=ASPM,BRCA1 Reference=A|T Alteration=C|G Quality=[0.9:1.0) Type=SNP|MNP|INS|DEL|MIXED info_VT=DEL info_EUR_AF=(0.9:1.0) Start=12340 AlterationNumber=2
        :param str vx_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str ex_query: Expression data query, of the form: Gene=ENSG00000230368,ENSG00000188976,ENSG00000016602,ENSG00000162670 MinValue=1.50
        :param str ex_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str fx_query: Flow cytometry data query, of the form: ReadoutType=Median|Count CellPopulation=\"CD45+, live\" MinValue=3.5
        :param str fx_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param int page_offset: Offset into omics results
        :param int page_limit: How many results to retrieve in this page, instead of the default 2000
        :return: OmicsResponse. If the method is called asynchronously, returns the request thread.
        """

        all_params = ['study_filter', 'study_query', 'sample_filter', 'sample_query', 'search_specific_terms', 'vx_query', 'vx_filter', 'ex_query', 'ex_filter', 'fx_query', 'fx_filter', 'page_offset', 'page_limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_flow_cytometry" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'study_filter' in params:
            query_params.append(('studyFilter', params['study_filter']))  # noqa: E501
        if 'study_query' in params:
            query_params.append(('studyQuery', params['study_query']))  # noqa: E501
        if 'sample_filter' in params:
            query_params.append(('sampleFilter', params['sample_filter']))  # noqa: E501
        if 'sample_query' in params:
            query_params.append(('sampleQuery', params['sample_query']))  # noqa: E501
        if 'search_specific_terms' in params:
            query_params.append(('searchSpecificTerms', params['search_specific_terms']))  # noqa: E501
        if 'vx_query' in params:
            query_params.append(('vxQuery', params['vx_query']))  # noqa: E501
        if 'vx_filter' in params:
            query_params.append(('vxFilter', params['vx_filter']))  # noqa: E501
        if 'ex_query' in params:
            query_params.append(('exQuery', params['ex_query']))  # noqa: E501
        if 'ex_filter' in params:
            query_params.append(('exFilter', params['ex_filter']))  # noqa: E501
        if 'fx_query' in params:
            query_params.append(('fxQuery', params['fx_query']))  # noqa: E501
        if 'fx_filter' in params:
            query_params.append(('fxFilter', params['fx_filter']))  # noqa: E501
        if 'page_offset' in params:
            query_params.append(('pageOffset', params['page_offset']))  # noqa: E501
        if 'page_limit' in params:
            query_params.append(('pageLimit', params['page_limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Genestack-API-Token']  # noqa: E501

        return self.api_client.call_api(
            '/omics/flow-cytometry', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OmicsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_flow_cytometry_data(self, **kwargs):  # noqa: E501
        """Perform integration-aware query for Flow Cytometry data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_flow_cytometry_data(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str study_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                                 **Note**

                                     In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                                 **Examples**

                                     A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                                 **Literal values**

                                     **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                                 **Terms**

                                     A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                                 **Binary connectives**

                                     The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str study_query: Search for objects via a full-text query over all metadata.
        :param str sample_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                                  **Note**

                                      In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                                  **Examples**

                                      A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                                  **Literal values**

                                      **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                                  **Terms**

                                      A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                                  **Binary connectives**

                                      The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str sample_query: Search for objects via a full-text query over all metadata.
        :param bool search_specific_terms: Modifies the full-text query to search across more specific dictionary terms. For example, search query \"Body fluid\" will also search for files with term \"Blood\" in their metadata, given there exists a dictionary that describes such relation.
        :param str vx_query: Variant data query, of the form: VariationId=rs548419688,rs544419019 Intervals=12:23432-234324,30:234324-23432 Gene=ASPM,BRCA1 Reference=A|T Alteration=C|G Quality=[0.9:1.0) Type=SNP|MNP|INS|DEL|MIXED info_VT=DEL info_EUR_AF=(0.9:1.0) Start=12340 AlterationNumber=2
        :param str vx_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str ex_query: Expression data query, of the form: Gene=ENSG00000230368,ENSG00000188976,ENSG00000016602,ENSG00000162670 MinValue=1.50
        :param str ex_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str fx_query: Flow cytometry data query, of the form: ReadoutType=Median|Count CellPopulation=\"CD45+, live\" MinValue=3.5
        :param str fx_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param int page_offset: Offset into omics results
        :param int page_limit: How many results to retrieve in this page, instead of the default 2000
        :return: OmicsResponse. If the method is called asynchronously, returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_flow_cytometry_data_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_flow_cytometry_data_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_flow_cytometry_data_with_http_info(self, **kwargs):  # noqa: E501
        """Perform integration-aware query for Flow Cytometry data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_flow_cytometry_data_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str study_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                                 **Note**

                                     In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                                 **Examples**

                                     A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                                 **Literal values**

                                     **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                                 **Terms**

                                     A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                                 **Binary connectives**

                                     The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str study_query: Search for objects via a full-text query over all metadata.
        :param str sample_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                                  **Note**

                                      In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                                  **Examples**

                                      A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                                  **Literal values**

                                      **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                                  **Terms**

                                      A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                                  **Binary connectives**

                                      The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str sample_query: Search for objects via a full-text query over all metadata.
        :param bool search_specific_terms: Modifies the full-text query to search across more specific dictionary terms. For example, search query \"Body fluid\" will also search for files with term \"Blood\" in their metadata, given there exists a dictionary that describes such relation.
        :param str vx_query: Variant data query, of the form: VariationId=rs548419688,rs544419019 Intervals=12:23432-234324,30:234324-23432 Gene=ASPM,BRCA1 Reference=A|T Alteration=C|G Quality=[0.9:1.0) Type=SNP|MNP|INS|DEL|MIXED info_VT=DEL info_EUR_AF=(0.9:1.0) Start=12340 AlterationNumber=2
        :param str vx_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str ex_query: Expression data query, of the form: Gene=ENSG00000230368,ENSG00000188976,ENSG00000016602,ENSG00000162670 MinValue=1.50
        :param str ex_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str fx_query: Flow cytometry data query, of the form: ReadoutType=Median|Count CellPopulation=\"CD45+, live\" MinValue=3.5
        :param str fx_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param int page_offset: Offset into omics results
        :param int page_limit: How many results to retrieve in this page, instead of the default 2000
        :return: OmicsResponse. If the method is called asynchronously, returns the request thread.
        """

        all_params = ['study_filter', 'study_query', 'sample_filter', 'sample_query', 'search_specific_terms', 'vx_query', 'vx_filter', 'ex_query', 'ex_filter', 'fx_query', 'fx_filter', 'page_offset', 'page_limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_flow_cytometry_data" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'study_filter' in params:
            query_params.append(('studyFilter', params['study_filter']))  # noqa: E501
        if 'study_query' in params:
            query_params.append(('studyQuery', params['study_query']))  # noqa: E501
        if 'sample_filter' in params:
            query_params.append(('sampleFilter', params['sample_filter']))  # noqa: E501
        if 'sample_query' in params:
            query_params.append(('sampleQuery', params['sample_query']))  # noqa: E501
        if 'search_specific_terms' in params:
            query_params.append(('searchSpecificTerms', params['search_specific_terms']))  # noqa: E501
        if 'vx_query' in params:
            query_params.append(('vxQuery', params['vx_query']))  # noqa: E501
        if 'vx_filter' in params:
            query_params.append(('vxFilter', params['vx_filter']))  # noqa: E501
        if 'ex_query' in params:
            query_params.append(('exQuery', params['ex_query']))  # noqa: E501
        if 'ex_filter' in params:
            query_params.append(('exFilter', params['ex_filter']))  # noqa: E501
        if 'fx_query' in params:
            query_params.append(('fxQuery', params['fx_query']))  # noqa: E501
        if 'fx_filter' in params:
            query_params.append(('fxFilter', params['fx_filter']))  # noqa: E501
        if 'page_offset' in params:
            query_params.append(('pageOffset', params['page_offset']))  # noqa: E501
        if 'page_limit' in params:
            query_params.append(('pageLimit', params['page_limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Genestack-API-Token']  # noqa: E501

        return self.api_client.call_api(
            '/omics/flow-cytometry/data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OmicsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_samples(self, **kwargs):  # noqa: E501
        """Perform integration-aware query for samples  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_samples(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str study_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                                 **Note**

                                     In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                                 **Examples**

                                     A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                                 **Literal values**

                                     **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                                 **Terms**

                                     A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                                 **Binary connectives**

                                     The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str study_query: Search for objects via a full-text query over all metadata.
        :param str sample_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                                  **Note**

                                      In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                                  **Examples**

                                      A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                                  **Literal values**

                                      **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                                  **Terms**

                                      A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                                  **Binary connectives**

                                      The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str sample_query: Search for objects via a full-text query over all metadata.
        :param bool search_specific_terms: Modifies the full-text query to search across more specific dictionary terms. For example, search query \"Body fluid\" will also search for files with term \"Blood\" in their metadata, given there exists a dictionary that describes such relation.
        :param str vx_query: Variant data query, of the form: VariationId=rs548419688,rs544419019 Intervals=12:23432-234324,30:234324-23432 Gene=ASPM,BRCA1 Reference=A|T Alteration=C|G Quality=[0.9:1.0) Type=SNP|MNP|INS|DEL|MIXED info_VT=DEL info_EUR_AF=(0.9:1.0) Start=12340 AlterationNumber=2
        :param str vx_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str ex_query: Expression data query, of the form: Gene=ENSG00000230368,ENSG00000188976,ENSG00000016602,ENSG00000162670 MinValue=1.50
        :param str ex_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str fx_query: Flow cytometry data query, of the form: ReadoutType=Median|Count CellPopulation=\"CD45+, live\" MinValue=3.5
        :param str fx_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param int page_offset: Offset into omics results
        :param int page_limit: How many results to retrieve in this page, instead of the default 2000
        :return: OmicsResponse. If the method is called asynchronously, returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_samples_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_samples_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_samples_with_http_info(self, **kwargs):  # noqa: E501
        """Perform integration-aware query for samples  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_samples_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str study_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                                 **Note**

                                     In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                                 **Examples**

                                     A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                                 **Literal values**

                                     **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                                 **Terms**

                                     A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                                 **Binary connectives**

                                     The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str study_query: Search for objects via a full-text query over all metadata.
        :param str sample_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                                  **Note**

                                      In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                                  **Examples**

                                      A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                                  **Literal values**

                                      **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                                  **Terms**

                                      A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                                  **Binary connectives**

                                      The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str sample_query: Search for objects via a full-text query over all metadata.
        :param bool search_specific_terms: Modifies the full-text query to search across more specific dictionary terms. For example, search query \"Body fluid\" will also search for files with term \"Blood\" in their metadata, given there exists a dictionary that describes such relation.
        :param str vx_query: Variant data query, of the form: VariationId=rs548419688,rs544419019 Intervals=12:23432-234324,30:234324-23432 Gene=ASPM,BRCA1 Reference=A|T Alteration=C|G Quality=[0.9:1.0) Type=SNP|MNP|INS|DEL|MIXED info_VT=DEL info_EUR_AF=(0.9:1.0) Start=12340 AlterationNumber=2
        :param str vx_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str ex_query: Expression data query, of the form: Gene=ENSG00000230368,ENSG00000188976,ENSG00000016602,ENSG00000162670 MinValue=1.50
        :param str ex_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str fx_query: Flow cytometry data query, of the form: ReadoutType=Median|Count CellPopulation=\"CD45+, live\" MinValue=3.5
        :param str fx_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param int page_offset: Offset into omics results
        :param int page_limit: How many results to retrieve in this page, instead of the default 2000
        :return: OmicsResponse. If the method is called asynchronously, returns the request thread.
        """

        all_params = ['study_filter', 'study_query', 'sample_filter', 'sample_query', 'search_specific_terms', 'vx_query', 'vx_filter', 'ex_query', 'ex_filter', 'fx_query', 'fx_filter', 'page_offset', 'page_limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_samples" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'study_filter' in params:
            query_params.append(('studyFilter', params['study_filter']))  # noqa: E501
        if 'study_query' in params:
            query_params.append(('studyQuery', params['study_query']))  # noqa: E501
        if 'sample_filter' in params:
            query_params.append(('sampleFilter', params['sample_filter']))  # noqa: E501
        if 'sample_query' in params:
            query_params.append(('sampleQuery', params['sample_query']))  # noqa: E501
        if 'search_specific_terms' in params:
            query_params.append(('searchSpecificTerms', params['search_specific_terms']))  # noqa: E501
        if 'vx_query' in params:
            query_params.append(('vxQuery', params['vx_query']))  # noqa: E501
        if 'vx_filter' in params:
            query_params.append(('vxFilter', params['vx_filter']))  # noqa: E501
        if 'ex_query' in params:
            query_params.append(('exQuery', params['ex_query']))  # noqa: E501
        if 'ex_filter' in params:
            query_params.append(('exFilter', params['ex_filter']))  # noqa: E501
        if 'fx_query' in params:
            query_params.append(('fxQuery', params['fx_query']))  # noqa: E501
        if 'fx_filter' in params:
            query_params.append(('fxFilter', params['fx_filter']))  # noqa: E501
        if 'page_offset' in params:
            query_params.append(('pageOffset', params['page_offset']))  # noqa: E501
        if 'page_limit' in params:
            query_params.append(('pageLimit', params['page_limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Genestack-API-Token']  # noqa: E501

        return self.api_client.call_api(
            '/omics/samples', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OmicsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_variant(self, **kwargs):  # noqa: E501
        """Perform integration-aware query for variant objects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_variant(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str study_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                                 **Note**

                                     In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                                 **Examples**

                                     A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                                 **Literal values**

                                     **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                                 **Terms**

                                     A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                                 **Binary connectives**

                                     The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str study_query: Search for objects via a full-text query over all metadata.
        :param str sample_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                                  **Note**

                                      In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                                  **Examples**

                                      A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                                  **Literal values**

                                      **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                                  **Terms**

                                      A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                                  **Binary connectives**

                                      The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str sample_query: Search for objects via a full-text query over all metadata.
        :param bool search_specific_terms: Modifies the full-text query to search across more specific dictionary terms. For example, search query \"Body fluid\" will also search for files with term \"Blood\" in their metadata, given there exists a dictionary that describes such relation.
        :param str vx_query: Variant data query, of the form: VariationId=rs548419688,rs544419019 Intervals=12:23432-234324,30:234324-23432 Gene=ASPM,BRCA1 Reference=A|T Alteration=C|G Quality=[0.9:1.0) Type=SNP|MNP|INS|DEL|MIXED info_VT=DEL info_EUR_AF=(0.9:1.0) Start=12340 AlterationNumber=2
        :param str vx_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str ex_query: Expression data query, of the form: Gene=ENSG00000230368,ENSG00000188976,ENSG00000016602,ENSG00000162670 MinValue=1.50
        :param str ex_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str fx_query: Flow cytometry data query, of the form: ReadoutType=Median|Count CellPopulation=\"CD45+, live\" MinValue=3.5
        :param str fx_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param int page_offset: Offset into omics results
        :param int page_limit: How many results to retrieve in this page, instead of the default 2000
        :return: OmicsResponse. If the method is called asynchronously, returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_variant_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_variant_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_variant_with_http_info(self, **kwargs):  # noqa: E501
        """Perform integration-aware query for variant objects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_variant_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str study_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                                 **Note**

                                     In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                                 **Examples**

                                     A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                                 **Literal values**

                                     **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                                 **Terms**

                                     A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                                 **Binary connectives**

                                     The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str study_query: Search for objects via a full-text query over all metadata.
        :param str sample_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                                  **Note**

                                      In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                                  **Examples**

                                      A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                                  **Literal values**

                                      **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                                  **Terms**

                                      A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                                  **Binary connectives**

                                      The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str sample_query: Search for objects via a full-text query over all metadata.
        :param bool search_specific_terms: Modifies the full-text query to search across more specific dictionary terms. For example, search query \"Body fluid\" will also search for files with term \"Blood\" in their metadata, given there exists a dictionary that describes such relation.
        :param str vx_query: Variant data query, of the form: VariationId=rs548419688,rs544419019 Intervals=12:23432-234324,30:234324-23432 Gene=ASPM,BRCA1 Reference=A|T Alteration=C|G Quality=[0.9:1.0) Type=SNP|MNP|INS|DEL|MIXED info_VT=DEL info_EUR_AF=(0.9:1.0) Start=12340 AlterationNumber=2
        :param str vx_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str ex_query: Expression data query, of the form: Gene=ENSG00000230368,ENSG00000188976,ENSG00000016602,ENSG00000162670 MinValue=1.50
        :param str ex_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str fx_query: Flow cytometry data query, of the form: ReadoutType=Median|Count CellPopulation=\"CD45+, live\" MinValue=3.5
        :param str fx_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param int page_offset: Offset into omics results
        :param int page_limit: How many results to retrieve in this page, instead of the default 2000
        :return: OmicsResponse. If the method is called asynchronously, returns the request thread.
        """

        all_params = ['study_filter', 'study_query', 'sample_filter', 'sample_query', 'search_specific_terms', 'vx_query', 'vx_filter', 'ex_query', 'ex_filter', 'fx_query', 'fx_filter', 'page_offset', 'page_limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_variant" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'study_filter' in params:
            query_params.append(('studyFilter', params['study_filter']))  # noqa: E501
        if 'study_query' in params:
            query_params.append(('studyQuery', params['study_query']))  # noqa: E501
        if 'sample_filter' in params:
            query_params.append(('sampleFilter', params['sample_filter']))  # noqa: E501
        if 'sample_query' in params:
            query_params.append(('sampleQuery', params['sample_query']))  # noqa: E501
        if 'search_specific_terms' in params:
            query_params.append(('searchSpecificTerms', params['search_specific_terms']))  # noqa: E501
        if 'vx_query' in params:
            query_params.append(('vxQuery', params['vx_query']))  # noqa: E501
        if 'vx_filter' in params:
            query_params.append(('vxFilter', params['vx_filter']))  # noqa: E501
        if 'ex_query' in params:
            query_params.append(('exQuery', params['ex_query']))  # noqa: E501
        if 'ex_filter' in params:
            query_params.append(('exFilter', params['ex_filter']))  # noqa: E501
        if 'fx_query' in params:
            query_params.append(('fxQuery', params['fx_query']))  # noqa: E501
        if 'fx_filter' in params:
            query_params.append(('fxFilter', params['fx_filter']))  # noqa: E501
        if 'page_offset' in params:
            query_params.append(('pageOffset', params['page_offset']))  # noqa: E501
        if 'page_limit' in params:
            query_params.append(('pageLimit', params['page_limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Genestack-API-Token']  # noqa: E501

        return self.api_client.call_api(
            '/omics/variant', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OmicsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_variant_data(self, **kwargs):  # noqa: E501
        """Perform integration-aware query for variant data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_variant_data(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str study_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                                 **Note**

                                     In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                                 **Examples**

                                     A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                                 **Literal values**

                                     **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                                 **Terms**

                                     A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                                 **Binary connectives**

                                     The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str study_query: Search for objects via a full-text query over all metadata.
        :param str sample_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                                  **Note**

                                      In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                                  **Examples**

                                      A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                                  **Literal values**

                                      **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                                  **Terms**

                                      A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                                  **Binary connectives**

                                      The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str sample_query: Search for objects via a full-text query over all metadata.
        :param bool search_specific_terms: Modifies the full-text query to search across more specific dictionary terms. For example, search query \"Body fluid\" will also search for files with term \"Blood\" in their metadata, given there exists a dictionary that describes such relation.
        :param str vx_query: Variant data query, of the form: VariationId=rs548419688,rs544419019 Intervals=12:23432-234324,30:234324-23432 Gene=ASPM,BRCA1 Reference=A|T Alteration=C|G Quality=[0.9:1.0) Type=SNP|MNP|INS|DEL|MIXED info_VT=DEL info_EUR_AF=(0.9:1.0) Start=12340 AlterationNumber=2
        :param str vx_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str ex_query: Expression data query, of the form: Gene=ENSG00000230368,ENSG00000188976,ENSG00000016602,ENSG00000162670 MinValue=1.50
        :param str ex_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str fx_query: Flow cytometry data query, of the form: ReadoutType=Median|Count CellPopulation=\"CD45+, live\" MinValue=3.5
        :param str fx_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param int page_offset: Offset into omics results
        :param int page_limit: How many results to retrieve in this page, instead of the default 2000
        :return: OmicsResponse. If the method is called asynchronously, returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_variant_data_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_variant_data_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_variant_data_with_http_info(self, **kwargs):  # noqa: E501
        """Perform integration-aware query for variant data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_variant_data_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str study_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                                 **Note**

                                     In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                                 **Examples**

                                     A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                                 **Literal values**

                                     **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                                 **Terms**

                                     A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                                 **Binary connectives**

                                     The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str study_query: Search for objects via a full-text query over all metadata.
        :param str sample_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                                  **Note**

                                      In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                                  **Examples**

                                      A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                                  **Literal values**

                                      **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                                  **Terms**

                                      A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                                  **Binary connectives**

                                      The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str sample_query: Search for objects via a full-text query over all metadata.
        :param bool search_specific_terms: Modifies the full-text query to search across more specific dictionary terms. For example, search query \"Body fluid\" will also search for files with term \"Blood\" in their metadata, given there exists a dictionary that describes such relation.
        :param str vx_query: Variant data query, of the form: VariationId=rs548419688,rs544419019 Intervals=12:23432-234324,30:234324-23432 Gene=ASPM,BRCA1 Reference=A|T Alteration=C|G Quality=[0.9:1.0) Type=SNP|MNP|INS|DEL|MIXED info_VT=DEL info_EUR_AF=(0.9:1.0) Start=12340 AlterationNumber=2
        :param str vx_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str ex_query: Expression data query, of the form: Gene=ENSG00000230368,ENSG00000188976,ENSG00000016602,ENSG00000162670 MinValue=1.50
        :param str ex_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param str fx_query: Flow cytometry data query, of the form: ReadoutType=Median|Count CellPopulation=\"CD45+, live\" MinValue=3.5
        :param str fx_filter: Query string supporting key-value metadata pairs, negation, numeric range filtering and boolean combinations.  

                              **Note**

                                  In the below, we use ``(less-than)`` to represent the single character less-than sign.  

                              **Examples**

                                  A **query** is a boolean combination of **terms** or sub-**expressions** e.g.  1. ``csv:Gender=female AND genestack.bio:organism=\"Human\"``  2. ``bio:age(less-than)50 || genestack.bio:organism!=Mouse``  We now describe the precise query language exhibited by these examples.  

                              **Literal values**

                                  **Strings** are (1) delimited with double quote characters (``\"``). Literal quote characters and backslashes (2) may be escaped with the backslash character (``\\``). Basic **strings** with characters matching ``[a-zA-Z0-9:-_$]`` (3) need not be quoted.  The following are examples:  1. ``\"hello world\"``  2. ``\"Here is a quote: \\\", and here a backslash: \\\\\"``  3. ``hello$World``  **Numbers** are (1) base-10 integer values, or (2) base-10 numbers with a fractional part, e.g.  1. ``-5``  2. ``7.23``  

                              **Terms**

                                  A **term** is either (1) a metadata **key-value term**, (2) a negated metadata **key-value term** or (3) a **numerical range term**, described below.  A **key-value term** has the form ``metadataKey=value``, where the left and right operands are both **strings**.  This will match literal metadata values exactly.  A **negated key-value term** has the form ``metadataKey!=value``, where the operands are as above.  A **numerical range term** has the form ``metadataKey(op)value``, where the operator ``(op)`` is either a less-than or greater-than character, the left operand is a **string** and the right operand a **number**.  The following are examples:  1. ``genestack.bio:organism=\"Homo sapiens\"``  2. ``age:years(less-than)50``  

                              **Binary connectives**

                                  The **binary connectives** are ``&&`` and ``||``, with synonyms:  1. ``and``  2. ``AND``  3. ``or``  4. ``OR``  **Connectives** must be separated from other tokens with whitespace.  Complex **expressions** may be formed with parenthesis characters, otherwise standard precedence rules apply.  The following are examples:  1. ``a=b``  2. ``a=b AND c=d``  3. ``(a=b || c=d) AND e(less-than)50``

        :param int page_offset: Offset into omics results
        :param int page_limit: How many results to retrieve in this page, instead of the default 2000
        :return: OmicsResponse. If the method is called asynchronously, returns the request thread.
        """

        all_params = ['study_filter', 'study_query', 'sample_filter', 'sample_query', 'search_specific_terms', 'vx_query', 'vx_filter', 'ex_query', 'ex_filter', 'fx_query', 'fx_filter', 'page_offset', 'page_limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_variant_data" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'study_filter' in params:
            query_params.append(('studyFilter', params['study_filter']))  # noqa: E501
        if 'study_query' in params:
            query_params.append(('studyQuery', params['study_query']))  # noqa: E501
        if 'sample_filter' in params:
            query_params.append(('sampleFilter', params['sample_filter']))  # noqa: E501
        if 'sample_query' in params:
            query_params.append(('sampleQuery', params['sample_query']))  # noqa: E501
        if 'search_specific_terms' in params:
            query_params.append(('searchSpecificTerms', params['search_specific_terms']))  # noqa: E501
        if 'vx_query' in params:
            query_params.append(('vxQuery', params['vx_query']))  # noqa: E501
        if 'vx_filter' in params:
            query_params.append(('vxFilter', params['vx_filter']))  # noqa: E501
        if 'ex_query' in params:
            query_params.append(('exQuery', params['ex_query']))  # noqa: E501
        if 'ex_filter' in params:
            query_params.append(('exFilter', params['ex_filter']))  # noqa: E501
        if 'fx_query' in params:
            query_params.append(('fxQuery', params['fx_query']))  # noqa: E501
        if 'fx_filter' in params:
            query_params.append(('fxFilter', params['fx_filter']))  # noqa: E501
        if 'page_offset' in params:
            query_params.append(('pageOffset', params['page_offset']))  # noqa: E501
        if 'page_limit' in params:
            query_params.append(('pageLimit', params['page_limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Genestack-API-Token']  # noqa: E501

        return self.api_client.call_api(
            '/omics/variant/data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OmicsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
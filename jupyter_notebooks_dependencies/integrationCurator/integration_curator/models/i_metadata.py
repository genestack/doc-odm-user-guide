# coding: utf-8

"""
    ODM Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: default-released
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from integration_curator.models.metadata_content import MetadataContent  # noqa: F401,E501


class IMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content': 'MetadataContent',
        'content_map': 'dict(str, object)',
        'data_type': 'str',
        'id': 'str',
        'name': 'str',
        'public': 'bool',
        'source': 'str'
    }

    attribute_map = {
        'content': 'content',
        'content_map': 'contentMap',
        'data_type': 'dataType',
        'id': 'id',
        'name': 'name',
        'public': 'public',
        'source': 'source'
    }

    def __init__(self, content=None, content_map=None, data_type=None, id=None, name=None, public=None, source=None):  # noqa: E501
        """IMetadata - a model defined in Swagger"""  # noqa: E501

        self._content = None
        self._content_map = None
        self._data_type = None
        self._id = None
        self._name = None
        self._public = None
        self._source = None
        self.discriminator = None

        if content is not None:
            self.content = content
        if content_map is not None:
            self.content_map = content_map
        if data_type is not None:
            self.data_type = data_type
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if public is not None:
            self.public = public
        if source is not None:
            self.source = source

    @property
    def content(self):
        """Gets the content of this IMetadata.  # noqa: E501


        :return: The content of this IMetadata.  # noqa: E501
        :rtype: MetadataContent
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this IMetadata.


        :param content: The content of this IMetadata.  # noqa: E501
        :type: MetadataContent
        """

        self._content = content

    @property
    def content_map(self):
        """Gets the content_map of this IMetadata.  # noqa: E501


        :return: The content_map of this IMetadata.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._content_map

    @content_map.setter
    def content_map(self, content_map):
        """Sets the content_map of this IMetadata.


        :param content_map: The content_map of this IMetadata.  # noqa: E501
        :type: dict(str, object)
        """

        self._content_map = content_map

    @property
    def data_type(self):
        """Gets the data_type of this IMetadata.  # noqa: E501


        :return: The data_type of this IMetadata.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this IMetadata.


        :param data_type: The data_type of this IMetadata.  # noqa: E501
        :type: str
        """

        self._data_type = data_type

    @property
    def id(self):
        """Gets the id of this IMetadata.  # noqa: E501


        :return: The id of this IMetadata.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IMetadata.


        :param id: The id of this IMetadata.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this IMetadata.  # noqa: E501


        :return: The name of this IMetadata.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IMetadata.


        :param name: The name of this IMetadata.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def public(self):
        """Gets the public of this IMetadata.  # noqa: E501


        :return: The public of this IMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this IMetadata.


        :param public: The public of this IMetadata.  # noqa: E501
        :type: bool
        """

        self._public = public

    @property
    def source(self):
        """Gets the source of this IMetadata.  # noqa: E501


        :return: The source of this IMetadata.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this IMetadata.


        :param source: The source of this IMetadata.  # noqa: E501
        :type: str
        """

        self._source = source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For ``print`` and ``pprint``"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
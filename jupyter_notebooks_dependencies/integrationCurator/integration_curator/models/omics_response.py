# coding: utf-8

"""
    ODM Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: default-released
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OmicsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data': 'list[object]',
        'log': 'list[str]',
        'results_exhausted': 'bool',
        'studies_matching_query': 'int'
    }

    attribute_map = {
        'data': 'data',
        'log': 'log',
        'results_exhausted': 'resultsExhausted',
        'studies_matching_query': 'studiesMatchingQuery'
    }

    def __init__(self, data=None, log=None, results_exhausted=None, studies_matching_query=None):  # noqa: E501
        """OmicsResponse - a model defined in Swagger"""  # noqa: E501

        self._data = None
        self._log = None
        self._results_exhausted = None
        self._studies_matching_query = None
        self.discriminator = None

        if data is not None:
            self.data = data
        if log is not None:
            self.log = log
        if results_exhausted is not None:
            self.results_exhausted = results_exhausted
        if studies_matching_query is not None:
            self.studies_matching_query = studies_matching_query

    @property
    def data(self):
        """Gets the data of this OmicsResponse.  # noqa: E501


        :return: The data of this OmicsResponse.  # noqa: E501
        :rtype: list[object]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this OmicsResponse.


        :param data: The data of this OmicsResponse.  # noqa: E501
        :type: list[object]
        """

        self._data = data

    @property
    def log(self):
        """Gets the log of this OmicsResponse.  # noqa: E501


        :return: The log of this OmicsResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._log

    @log.setter
    def log(self, log):
        """Sets the log of this OmicsResponse.


        :param log: The log of this OmicsResponse.  # noqa: E501
        :type: list[str]
        """

        self._log = log

    @property
    def results_exhausted(self):
        """Gets the results_exhausted of this OmicsResponse.  # noqa: E501


        :return: The results_exhausted of this OmicsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._results_exhausted

    @results_exhausted.setter
    def results_exhausted(self, results_exhausted):
        """Sets the results_exhausted of this OmicsResponse.


        :param results_exhausted: The results_exhausted of this OmicsResponse.  # noqa: E501
        :type: bool
        """

        self._results_exhausted = results_exhausted

    @property
    def studies_matching_query(self):
        """Gets the studies_matching_query of this OmicsResponse.  # noqa: E501


        :return: The studies_matching_query of this OmicsResponse.  # noqa: E501
        :rtype: int
        """
        return self._studies_matching_query

    @studies_matching_query.setter
    def studies_matching_query(self, studies_matching_query):
        """Sets the studies_matching_query of this OmicsResponse.


        :param studies_matching_query: The studies_matching_query of this OmicsResponse.  # noqa: E501
        :type: int
        """

        self._studies_matching_query = studies_matching_query

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For ``print`` and ``pprint``"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OmicsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other